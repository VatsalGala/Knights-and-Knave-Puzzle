!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/6f0fdd3/
#description	static/style/main.css	/^#description{$/;"	i
#generate-btn	static/style/main.css	/^#generate-btn{$/;"	i
#generate-btn:active	static/style/main.css	/^#generate-btn:active{$/;"	i
#generate-btn:hover	static/style/main.css	/^#generate-btn:hover{$/;"	i
#generate-btn:hover > i	static/style/main.css	/^ #generate-btn:hover > i{$/;"	s
#image	static/style/main.css	/^#image{$/;"	i
#main-container	static/style/main.css	/^#main-container{$/;"	i
#main-grid	static/style/main.css	/^#main-grid{$/;"	i
#puzzle-area	static/style/main.css	/^#puzzle-area{$/;"	i
#puzzle-text	static/style/main.css	/^#puzzle-text{$/;"	i
#title	static/style/main.css	/^#title{$/;"	i
.right	static/style/main.css	/^.right {$/;"	c
ALL_VARIABLES	Genetic/global_variables.py	/^ALL_VARIABLES = ['A', 'B', '1', 'C', '1', 'D', '1'] # Variable name always first followed by cou/;"	v
ASSUMED_ANSWER	Genetic/global_variables.py	/^ASSUMED_ANSWER = [True, False, True] #To be set on each run$/;"	v
BLOCK_SIZE	Genetic/global_variables.py	/^BLOCK_SIZE = 3$/;"	v
G	main.py	/^import Genetic.Genome as G$/;"	I
Genome	Genetic/Genome.py	/^class Genome(object):$/;"	c
MAX_ITERATION	Genetic/global_variables.py	/^MAX_ITERATION = 10$/;"	v
NAMES	Genetic/global_variables.py	/^NAMES = {a:a for a in VARIABLES}$/;"	v
OPERAND	Genetic/global_variables.py	/^OPERAND = ['&', "|"]$/;"	v
PEOPLE_COUNT	Genetic/global_variables.py	/^PEOPLE_COUNT = 3$/;"	v
POPULATION_SIZE	Genetic/global_variables.py	/^POPULATION_SIZE = 50$/;"	v
RWS	Genetic/Genome.py	/^def RWS(population, pointers):$/;"	f
SUS	Genetic/Genome.py	/^def SUS(population, N):$/;"	f
VARIABLES	Genetic/global_variables.py	/^VARIABLES = []$/;"	v
__init__	Genetic/Genome.py	/^    def __init__(self, eqn,  gene_type='original'):$/;"	m	class:Genome
__repr__	Genetic/Genome.py	/^    def __repr__(self):$/;"	m	class:Genome
_type	Genetic/functions.py	/^def _type(ch):$/;"	f
app	flask_server.py	/^app = Flask(__name__)$/;"	v
apply_operator	Genetic/functions.py	/^def apply_operator(a,op,b):$/;"	f
args	main.py	/^    args = parser.parse_args()$/;"	v
body	static/style/main.css	/^body{$/;"	s
calculate_fitness	Genetic/Genome.py	/^    def calculate_fitness(self):$/;"	m	class:Genome
check_for_answer	main.py	/^def check_for_answer(population):$/;"	f
create_boolean_question	main.py	/^def create_boolean_question(population_size=50, number_of_people=3):$/;"	f
crossover	Genetic/Genome.py	/^    def crossover(self, g, method="1p"):$/;"	m	class:Genome
description	index.html	/^        <div id="description"><a href="http:\/\/en.wikipedia.org\/wiki\/Knights_and_Knaves">Knig/;"	I
description	templates/index.html	/^        <div id="description"><a href="http:\/\/en.wikipedia.org\/wiki\/Knights_and_Knaves">Knig/;"	I
equation_to_sent	Genetic/sentence_formation.py	/^def equation_to_sent(original_eqn,claimer=gv.VARIABLES[0],variables=gv.VARIABLES[:-1], names=gv./;"	f
evaluate	Genetic/functions.py	/^def evaluate(original_equation, truth_values={"a":True,"b":True,"c":True}):$/;"	f
f	Genetic/Genome.py	/^from . import functions as f$/;"	x
f	Genetic/sentence_formation.py	/^from . import functions as f$/;"	x
f	flask_server.py	/^from Genetic import functions as f$/;"	x
f	main.py	/^import Genetic.functions as f$/;"	I
generate-btn	index.html	/^          <div id="generate-btn">Generate<i class="right"><\/i><\/div>$/;"	I
generate-btn	templates/index.html	/^          <div id="generate-btn" onclick="get_next_question()">Generate<i class="right"><\/i><\//;"	I
generate_question	Genetic/sentence_formation.py	/^def generate_question(g, variables=gv.VARIABLES, names=gv.NAMES):$/;"	f
generate_random_population	Genetic/Genome.py	/^def generate_random_population(N):$/;"	f
get_next_question	flask_server.py	/^def get_next_question():$/;"	f
gv	Genetic/Genome.py	/^from . import global_variables as gv$/;"	x
gv	Genetic/functions.py	/^from . import global_variables as gv$/;"	x
gv	Genetic/sentence_formation.py	/^from . import global_variables as gv$/;"	x
gv	flask_server.py	/^import Genetic.global_variables as gv$/;"	I
gv	main.py	/^import Genetic.global_variables as gv$/;"	I
i	static/style/main.css	/^i {$/;"	s
image	index.html	/^        <img src="rsc\/kak_img.jpg" alt="" id="image">$/;"	I
image	templates/index.html	/^        <img src="{{url_for('static', filename='rsc\/kak_img.jpg')}}" alt="" id="image">$/;"	I
input_page	flask_server.py	/^def input_page():$/;"	f
input_text	flask_server.py	/^input_text = None$/;"	v
json_data	flask_server.py	/^json_data = None$/;"	v
main-container	index.html	/^    <div id="main-container">$/;"	I
main-container	templates/index.html	/^    <div id="main-container">$/;"	I
main-grid	index.html	/^      <div id="main-grid">$/;"	I
main-grid	templates/index.html	/^      <div id="main-grid">$/;"	I
make_random_block	Genetic/functions.py	/^def make_random_block(block_size):$/;"	f
mutate	Genetic/Genome.py	/^    def mutate(self):$/;"	m	class:Genome
negate	Genetic/functions.py	/^def negate(ch):$/;"	f
negate_equation	Genetic/functions.py	/^def negate_equation(eqn):$/;"	f
negate_operator	Genetic/functions.py	/^def negate_operator(op):$/;"	f
negate_variable	Genetic/functions.py	/^def negate_variable(ch):$/;"	f
parser	main.py	/^    parser = ArgumentParser()$/;"	v
puzzle-area	index.html	/^        <div id="puzzle-area">$/;"	I
puzzle-area	templates/index.html	/^        <div id="puzzle-area">$/;"	I
puzzle-text	index.html	/^          <div id="puzzle-text">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do/;"	I
puzzle-text	templates/index.html	/^          <div id="puzzle-text">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do/;"	I
random_equation	Genetic/functions.py	/^def random_equation(blk_size=gv.BLOCK_SIZE, ppl_cnt=gv.PEOPLE_COUNT):$/;"	f
remove_ones	Genetic/functions.py	/^def remove_ones(eq):$/;"	f
root_var	Genetic/functions.py	/^def root_var(var):$/;"	f
sf	flask_server.py	/^import Genetic.sentence_formation as sf$/;"	I
sf	main.py	/^import Genetic.sentence_formation as sf$/;"	I
similarity_score	Genetic/functions.py	/^def similarity_score(row1, row2):$/;"	f
simple_page	flask_server.py	/^def simple_page():$/;"	f
title	index.html	/^        <div id="title">Knights And Knave<\/div>$/;"	I
title	templates/index.html	/^        <div id="title">Knights And Knave<\/div>$/;"	I
truth_table	Genetic/functions.py	/^def truth_table(n):$/;"	f
val	Genetic/functions.py	/^    def val(a):$/;"	f	function:evaluate	file:
